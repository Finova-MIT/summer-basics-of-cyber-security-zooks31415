Port Swigger Labs 

SQLi
1) Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data
Solution: Since it was my first lab and I couldn't figure it out on my own. with some help 
the given SQL query was: SELECT * FROM products WHERE category = 'Gifts' AND released = 1
to solve the lab I typed  ' OR 1=1 --  in the URL after categories= to solve the lab

2)Lab: SQL injection vulnerability allowing login bypass
Solution: I first checked for unsanitized text field, typing a ' into the username test field. 
This gav e=me an internal server error which confirmed that the site was indeed vulnerable to SQLi, then based on a guess of the SQL query
guess: SELECT firtname FORM users WHERE username='admin ' AND password =' something'
payload: administrator'-- 
this completely comments out the AND condition and logs me in as the administrator


Cross site scripting (XSS)

1) Lab: Reflected XSS into HTML context with nothing encoded
Solution: Again this was my fist XSS lab so I couldn't solve it on my own. 
I typed <script>alert(1)</script> into the search bar to solve the lab

2) Lab: Stored XSS into HTML context with nothing encoded
Solution: I typed into the comment section to solve the lab

3) Lab: DOM XSS in document.write sink using source location.search
Solution: 
    <script>
                        function trackSearch(query) {
                            document.write('<img src="/resources/images/tracker.gif?searchTerms='+query+'">');
                        }
                        var query = (new URLSearchParams(window.location.search)).get('search');
                        if(query) {
                            trackSearch(query);
                        }
                    </script>

This was the javascript code that the website was using in the search field.
so I injected '">' <script>alert(1)</script>// into the search query to solve the lab

4) Lab: DOM XSS in innerHTML sink using source location.search
Solution:              <script>
                            function doSearchQuery(query) {
                                document.getElementById('searchMessage').innerHTML = query;
                            }
                            var query = (new URLSearchParams(window.location.search)).get('search');
                            if(query) {
                                doSearchQuery(query);
                            }
                        </script>

innerHTML edits the contents of an HTML div
here:  <h1><span>0 search results for '</span><span id="searchMessage"></span><span>'</span></h1>
is the code that we are concerned with:
I injected <img src=x onerror=alert(1)> into the search field to solve the lab

5) Lab: DOM XSS in jQuery anchor href attribute sink using location.search source
Solution: I modified the URL to include: ?returnPath=javascript:alert(document.cookie)
and then clicked on "back" link to solve the lab

6) Lab: DOM XSS in jQuery selector sink using a hashchange event
Solution: I couldn't understand this one on my own so I had to see the solution
I typed <iframe src="https://YOUR-LAB-ID.web-security-academy.net/#" onload="this.src+='<img src=x onerror=print()>'"></iframe> 
on the exploit server to solve the lab

7) Lab: Reflected XSS into attribute with angle brackets HTML-encoded
Solution: I used the onmouseover event handler to inject malicious code into the website. 
the payload that I injected is: " onmouseover x="" and thus solved the lab

8) Lab: Stored XSS into anchor href attribute with double quotes HTML-encoded
Solution: This one was quite simple after inspecting the elements of the page, I injected javascript:alert(1) into the website text field to solve the lab 

9) Reflected XSS into a JavaScript string with angle brackets HTML encoded
Solution: I injected the paylaod '; alert(1)// into the text field to solve the lab


Clickjacking

1) Lab: Basic clickjacking with CSRF token protection
Solution: I crafted some HTML code that included an iframe with src set to the login page of the vulnerable website, I set the opacity of the iframe to 0.00001 so that 
It would just display a white screen and then I positioned a div with "CLICK ME" as its contents to exactly cover the "delete account button" which would trick the user into 
deleting their accounts

2) Lab: Clickjacking with form input data prefilled from a URL parameter
Solution: I put the src of the iframe to be followed by email=attacker@malicious.com to solve the lab 

3) Lab: Clickjacking with a frame buster script
Solution: <style>
iframe {
position: relative;
height: 700px;
width: 1000px;
opacity: 0.0000001;
z-index: 2;
}

div{
position: absolute;
top: 465px;
left:65px;
}
</style>
<iframe src=https://0add000d046836f6806517e6002c0022.web-security-academy.net/my-account?email=attacker@pwn.com sandbox="allow-same-origin allow-forms"></iframe>
<div>CLICK ME</div>
I sandboxed My iframe and only allowed forms and same origin to bybass the frame buster script to solve the lab.

XXE injection 

1) Lab: Exploiting XXE using external entities to retrieve files
Solution: In Burp Suite, I sent the HTTp POST reqiest from the HTTP history section to the Repeater. Then in the reapeter I checked if the request gave a vallid response.
After this test was successful, I edited the XML that the client was sending the serves to get the /etc/passwd from the server using the file: protocol and thus I solved the lab

2) Lab: Exploiting XXE to perform SSRF attacks
Solution: Again the Burp Suite in the XML, I included the URL with the IP given on the Port Swigger site and repeatedly sent requests, the respinse told me what was missing in the
URL everytime I sent the request and thus I solved the lab

Authentication 

1) Lab: Username enumeration via different responses
Solution: I used Burp Intruder's sniper attack to brute force the usernames from the list provided, and did the same for the passwords. This was possible since the site
told me whether my username or password was incorrect.

2) Lab: 2FA simple bypass
Solution: I logged into my account, copied the URL and modified it to read id=carlos to solve the salb

3) Lab: Password reset broken logic
Solution: I could not solve this one by myself. After taking some help I,  first reset my password using the password reset link ans sent the HTTP POST request to thr BURP repeater
there I noticed that the token was beind checked twice in the request, I edited both the tokens to notice that it was just comapring the values of the teo tokens, using this 
I could set the any arbitrary value of token, changing the username, I could log into Carlos' account and thus solved the lab.
